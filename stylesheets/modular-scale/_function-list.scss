// Outputs a list of values instead of a single value
@function ms-list($start: 0, $end: 0, $bases: $ms-base, $ratios: $ms-ratio) {
  
  $positive-return: ();
  $negitive-return: ();
  $return: ();

  @if $end >= 0 {
    // Generate a list of all possible values
    $positive-return: ms-generate-list($end, $bases, $ratios);
    
    // Sort the generated lists
    $positive-return: ms-sort-list($positive-return);

    // Trim list
    $trim-list: ();
    // If the starting value is a positive number
    // trim the positive return from that
    @if $start >= 0 {
      @for $i from ($start + 1) through $end + 1 {
        $trim-list: join($trim-list, nth($positive-return, $i));
      }
    }
    // If not, then include everything up to the end.
    @else {
      @for $i from 1 through $end + 1 {
        $trim-list: join($trim-list, nth($positive-return, $i));
      }
    }
    $positive-return: $trim-list;
  }
  
  // Generate a negitive list
  @if $start < 0 {
    // Generate a list of all possible values
    $negitive-return: ms-generate-list($start, $bases, $ratios);
    
    // Sort the generated lists
    $negitive-return: ms-sort-list($negitive-return);

    // Trim list
    $trim-list: ();
    @if $end < 0 {
      @for $i from abs($end) through abs($start) {
        $trim-list: join($trim-list, nth($negitive-return, $i));
      }
    }
    @else {
      @for $i from 1 through abs($start) {
        $trim-list: join($trim-list, nth($negitive-return, $i));
      }
    }
    $negitive-return: $trim-list;
  }
  
  // Join both positive and negitive possibilities.
  $return: join($negitive-return, $positive-return);

  @return $return;
}
